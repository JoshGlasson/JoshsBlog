{"html":"<p>I was sitting at home yesterday thinking it would be good to work on something small just for some practice. I stumbled upon a <a href=\"https://www.maxbits.net/blog/post/Writing-a-Discord-Bot-in-Ruby-using-DiscordRB/\" target=\"_blank\">blog post</a> regarding making a discord bot, and decided it would be cool to give it a go.</p>\n<p>The blog shows the process using Ruby. I hadn&#39;t used Ruby for a while so it wasn&#39;t easy for me to pick it up and remember the syntax. For that reason I decided I would also do it in JavaScript as I know more about it. I found a guide <a href=\"https://www.sitepoint.com/discord-bot-node-js/\" target=\"_blank\">here</a> which was really helpful.</p>\n<br>\n\n<h1 id=\"ruby\">Ruby</h1>\n<p>So as I mentioned above, I pretty much followed the blog I linked, with only a few minor changes to get things working, and instead of just sending a test message I wanted to send a link to my blog. I will go through the steps from the start, but credit to the above blog for most of the work!</p>\n<h2 id=\"register-your-bot\">Register Your Bot</h2>\n<p>To start with, you need to create a new Application in the <a href=\"https://discord.com/developers/applications\" target=\"_blank\">Discord Develper Portal</a>, which you can call whatever you want. I gave it the same name I wanted to give my bot, just to make life easier! Once you have a new application, go to the Bot tab, and press Add Bot. We will need its token and client id soon.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-new-application.png\" alt=\"Creating a New Application\"/>\n    <figcaption>Creating a New Application</figcaption>\n  </figure>\n</div>\n\n<h2 id=\"project-setup\">Project Setup</h2>\n<p>In your IDE of choice, create a project with the following structure.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-project-structure.png\" alt=\"Project Structure\"/>\n    <figcaption>Project Structure</figcaption>\n  </figure>\n</div>\n\n<p>If you haven&#39;t used Ruby before, the <code>Gemfile</code> is used to define dependencies. So starting with the <code>Gemfile</code>, the first thing we need to do is get the <code>discordrb</code> gem, so add the below to your <code>Gemfile</code>:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>source <span class=\"hljs-string\">&#x27;https://rubygems.org&#x27;</span>\ngem <span class=\"hljs-string\">&#x27;discordrb&#x27;</span></code></pre></div>\n\n<p>In the post I followed they did not define a <code>source</code>, however I needed it to make this work. To install the dependency, run <code>bundle install</code>. You should have <code>Bundler</code> installed already if you have Ruby. If not, now would be a good time to install Ruby!</p>\n<p>Next, we can put the below into <code>run.rb</code>:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>require_relative <span class=\"hljs-string\">&#x27;src/bot&#x27;</span></code></pre></div>\n\n<p><code>run.rb</code> is acting a shortcut to the <code>bot.rb</code> file where we are actually going to run our code. So lets give it some code to run, in <code>src/bot.rb</code> add:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">&#x27;discordrb&#x27;</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">&#x27;ostruct&#x27;</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">&#x27;yaml&#x27;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Bot</span></span>\n    <span class=\"hljs-keyword\">if</span> File.file? <span class=\"hljs-string\">&#x27;data/config.yaml&#x27;</span>\n        CONFIG = OpenStruct.new YAML.load_file <span class=\"hljs-string\">&#x27;data/config.yaml&#x27;</span>\n    <span class=\"hljs-keyword\">else</span>\n        puts <span class=\"hljs-string\">&#x27;Can\\&#x27;t load config file!&#x27;</span>\n        exit!\n    <span class=\"hljs-keyword\">end</span>\n\n    BOT = Discordrb::Commands::CommandBot.new(<span class=\"hljs-symbol\">client_id:</span> CONFIG.client_id, <span class=\"hljs-symbol\">token:</span> CONFIG.token, <span class=\"hljs-symbol\">prefix:</span> CONFIG.prefix)\n\n    <span class=\"hljs-comment\"># Discord Commands</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">DiscordCommands</span>;</span> <span class=\"hljs-keyword\">end</span>\n    Dir[<span class=\"hljs-string\">&#x27;src/modules/commands/*.rb&#x27;</span>].each { <span class=\"hljs-params\">|mod|</span> load mod }\n    DiscordCommands.constants.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|mod|</span>\n        BOT.<span class=\"hljs-keyword\">include</span>! DiscordCommands.const_get mod\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-comment\"># Discord Events</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">DiscordEvents</span>;</span> <span class=\"hljs-keyword\">end</span>\n    Dir[<span class=\"hljs-string\">&#x27;src/modules/events/*.rb&#x27;</span>].each { <span class=\"hljs-params\">|mod|</span> load mod }\n    DiscordEvents.constants.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|mod|</span>\n        BOT.<span class=\"hljs-keyword\">include</span>! DiscordEvents.const_get mod\n    <span class=\"hljs-keyword\">end</span>\n\n    BOT.run\n<span class=\"hljs-keyword\">end</span></code></pre></div>\n\n<p>The blog post I followed gives some good descriptions of what each part of this code is doing, so probably worth checking that out.</p>\n<p>You can see in the code above, we are getting some information from <code>CONFIG</code>. This is coming from the <code>data/config.yaml</code> file, which has three properties in it:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-symbol\">client_id:</span> <span class=\"hljs-string\">&#x27;Client Id (From the Dev Portal)&#x27;</span>\n<span class=\"hljs-symbol\">token:</span> <span class=\"hljs-string\">&#x27;Your Token (From the Dev Portal)&#x27;</span>\n<span class=\"hljs-symbol\">prefix:</span> <span class=\"hljs-string\">&#x27;?&#x27;</span></code></pre></div>\n\n<p>The client id and token both come from the Bot tab in the Discord Dev Portal. The prefix can be whatever you want, and will be used to call your bot with commands.</p>\n<p>Now that&#39;s all set up we can actually give it a command to work with. The post I followed gave a simple example of sending <code>?ping</code> and the bot responding with <em>pong</em>. However that isn&#39;t very interesting, so I am branching off here for a moment! I wanted my bot to promote my blog, by sending a link to it in the chat. So in <code>src/modules/commands/</code> I added a file called <code>promote.rb</code>, in which I added the following code:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">&#x27;discordrb/webhooks&#x27;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Bot</span></span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">DiscordCommands</span></span>\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Promote</span> <span class=\"hljs-title\">extend</span> <span class=\"hljs-title\">Discordrb::Commands::CommandContainer</span></span>\n            command <span class=\"hljs-symbol\">:promote</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|event|</span>\n                event.channel.send_embed(<span class=\"hljs-string\">&quot;Check out my blog here: &quot;</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|embed|</span>\n                    embed.title = <span class=\"hljs-string\">&quot;Joshs Blog&quot;</span>\n                    embed.colour = Random.bytes(<span class=\"hljs-number\">3</span>).unpack1(<span class=\"hljs-string\">&#x27;H*&#x27;</span>)\n                    embed.url = <span class=\"hljs-string\">&quot;https://joshglasson.com&quot;</span>\n                    embed.description = <span class=\"hljs-string\">&quot;My personal blog about Software Development, Sports, Music, and any more of my hobbies!&quot;</span>\n                    embed.timestamp = Time.at(Time.now())\n                <span class=\"hljs-keyword\">end</span>\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre></div>\n\n<p>Theres two parts to this to explain really. Firstly:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Bot</span></span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">DiscordCommands</span></span>\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Promote</span> <span class=\"hljs-title\">extend</span> <span class=\"hljs-title\">Discordrb::Commands::CommandContainer</span></span>\n            command <span class=\"hljs-symbol\">:promote</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|event|</span>\n              <span class=\"hljs-comment\"># not important right now</span>\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre></div>\n\n<p>This is the code to handle commands. We have extended <code>Discordrb::Commands::CommandContainer</code> which comes from the <code>discordrb</code> plugin, and added code in to handle commands. In this case, <code>command :promote do |event|</code> will listen for a <code>promote</code> command, and do something if it receives it.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">&#x27;discordrb/webhooks&#x27;</span>\n\ncommand <span class=\"hljs-symbol\">:promote</span> <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|event|</span>\n    event.channel.send_embed(<span class=\"hljs-string\">&quot;Check out my blog here: &quot;</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|embed|</span>\n        embed.title = <span class=\"hljs-string\">&quot;Joshs Blog&quot;</span>\n        embed.colour = Random.bytes(<span class=\"hljs-number\">3</span>).unpack1(<span class=\"hljs-string\">&#x27;H*&#x27;</span>)\n        embed.url = <span class=\"hljs-string\">&quot;https://joshglasson.com&quot;</span>\n        embed.description = <span class=\"hljs-string\">&quot;My personal blog about Software Development, Sports, Music, and any more of my hobbies!&quot;</span>\n        embed.timestamp = Time.at(Time.now())\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre></div>\n\n<p>Inside the command block is some code to embed a link. To use this we have to import <code>discordrb/webhooks</code>. Then we can use that to send an embedded link to the channel. I used the <a href=\"https://leovoel.github.io/embed-visualizer/\" target=\"_blank\">Discord Embed Visualiser</a> to help me build the code.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-ruby-embed.png\" alt=\"Ruby Code to Embed a Link\"/>\n    <figcaption>Ruby Code to Embed a Link</figcaption>\n  </figure>\n</div>\n\n<p>I replaced the colour with some code that randomly generates a hex code instead, and the hardcoded timestamp with a dynamic time instead.</p>\n<p>The last part is the same as the original post. In <code>events/online.rb</code> we add the following code:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Bot</span></span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">DiscordEvents</span></span>\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Online</span> <span class=\"hljs-title\">extend</span> <span class=\"hljs-title\">Discordrb::EventContainer</span></span>\n            ready <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|event|</span>\n                puts <span class=\"hljs-string\">&quot;Logged in as <span class=\"hljs-subst\">#{event.bot.profile.distinct}</span>&quot;</span>\n                puts <span class=\"hljs-string\">&quot;Invite URL: <span class=\"hljs-subst\">#{event.bot.invite_url}</span>&quot;</span>\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre></div>\n\n<p>Upon running <code>ruby run.rb</code>, you should see a message like this:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>[INFO : websocket @ 2020-09-02 09:25:30.187] Discord using gateway protocol version: 6, requested: 6\nLogged <span class=\"hljs-keyword\">in</span> as JoshsBlogPromoter<span class=\"hljs-comment\">#0931</span>\nInvite URL: https://discordapp.com/oauth2/authorize?&amp;client_id=750398124148654120&amp;scope=bot</code></pre></div>\n\n<p>If you follow the link, it should give you the option of adding the bot to one of your discord servers. Now you can test it by sending it a message, in this case <code>?promote</code>:</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-ruby-message.png\" alt=\"Ruby Bot Working in Discord\"/>\n    <figcaption>Ruby Bot Working in Discord</figcaption>\n  </figure>\n</div>\n\n<br>\n\n<h1 id=\"javascript\">JavaScript</h1>\n<p>So now we have a Ruby Discord Bot working, lets make one in JavaScript.</p>\n<h2 id=\"bot-setup\">Bot Setup</h2>\n<p>Firstly if you did not create an Application and Bot in the Ruby guide, do so now. Once that is done, go to the <strong>OAuth2</strong> tab and setup the permissions you want your bot to have. In <strong><em>Scopes</em></strong> tick <em>bot</em>, and in <strong><em>Bot Permissions</em></strong> I have ticked <em>Send Messages</em> and <em>Read Message History</em>. If you want it to do more, of course you can tick more options. Doing this should update the link in <strong><em>Scopes</em></strong>, and once you are happy, copy this link into your browser. This should take you to a page to add your bot to your server.</p>\n<h2 id=\"project-setup-1\">Project Setup</h2>\n<p>To start with, create 2 files. Firstly create a <code>package.json</code> file with the below:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>{\n  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;discord-bot&quot;</span>,\n  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;1.0.0&quot;</span>,\n  <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;My Discord Bot&quot;</span>,\n  <span class=\"hljs-attr\">&quot;main&quot;</span>: <span class=\"hljs-string\">&quot;index.js&quot;</span>,\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;test&quot;</span>: <span class=\"hljs-string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>\n  },\n  <span class=\"hljs-attr\">&quot;author&quot;</span>: <span class=\"hljs-string\">&quot;Josh Glasson&quot;</span>,\n  <span class=\"hljs-attr\">&quot;license&quot;</span>: <span class=\"hljs-string\">&quot;ISC&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dependencies&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;discord.js&quot;</span>: <span class=\"hljs-string\">&quot;^11.5.1&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dotenv&quot;</span>: <span class=\"hljs-string\">&quot;^8.2.0&quot;</span>\n  }\n}</code></pre></div>\n\n<p>Then run <code>npm install</code> to install the two defined dependencies, <code>discord.js</code> and <code>dotenv</code>. <code>dotenv</code> is going to help us keep our token private.</p>\n<p>Next create a file called <code>.env</code> and add your token into it:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-string\">TOKEN=&#x27;Your</span> <span class=\"hljs-string\">Token&#x27;</span></code></pre></div>\n\n<p>I would create a <code>.gitignore</code> file now too and make sure to add <code>.env</code> to it, just so you don&#39;t forget!</p>\n<p>Now we can create the bot. You may have noticed in the <code>package.json</code> file we defined <code>main</code> as <code>index.js</code>. That is the entrypoint for npm, so we should create an <code>index.js</code>.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;dotenv&#x27;</span>).config();\n<span class=\"hljs-keyword\">const</span> Discord = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;discord.js&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> bot = <span class=\"hljs-keyword\">new</span> Discord.Client();\nbot.commands = <span class=\"hljs-keyword\">new</span> Discord.Collection();\n<span class=\"hljs-keyword\">const</span> botCommands = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./commands&#x27;</span>);\n\n<span class=\"hljs-built_in\">Object</span>.keys(botCommands).map(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> {\n  bot.commands.set(botCommands[key].name, botCommands[key]);\n});\n\n<span class=\"hljs-keyword\">const</span> TOKEN = process.env.TOKEN;\n\nbot.login(TOKEN);\n\nbot.on(<span class=\"hljs-string\">&#x27;ready&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">`Logged in as <span class=\"hljs-subst\">${bot.user.tag}</span>!`</span>);\n});\n\nbot.on(<span class=\"hljs-string\">&#x27;message&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">msg</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> args = msg.content.split(<span class=\"hljs-regexp\">/ +/</span>);\n  <span class=\"hljs-keyword\">const</span> command = args.shift().toLowerCase();\n  <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">`Called command: <span class=\"hljs-subst\">${command}</span>`</span>);\n\n  <span class=\"hljs-keyword\">if</span> (!bot.commands.has(command)) <span class=\"hljs-keyword\">return</span>;\n\n  <span class=\"hljs-keyword\">try</span> {\n    bot.commands.get(command).execute(msg, args);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-built_in\">console</span>.error(error);\n    msg.reply(<span class=\"hljs-string\">&#x27;there was an error trying to execute that command!&#x27;</span>);\n  }\n});</code></pre></div>\n\n<p>This code uses the <code>discord.js</code> plugin to create a Discord client, then logs in using the token. It then creates a collection and populates it with commands from the <code>/commands</code> folder (which doesn&#39;t exist yet but we are getting there). Once the bot is ready it will log a message saying it is logged in. The below code is where the message handling happens:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>bot.on(<span class=\"hljs-string\">&#x27;message&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">msg</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> args = msg.content.split(<span class=\"hljs-regexp\">/ +/</span>);\n  <span class=\"hljs-keyword\">const</span> command = args.shift().toLowerCase();\n  <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">`Called command: <span class=\"hljs-subst\">${command}</span>`</span>);\n\n  <span class=\"hljs-keyword\">if</span> (!bot.commands.has(command)) <span class=\"hljs-keyword\">return</span>;\n\n  <span class=\"hljs-keyword\">try</span> {\n    bot.commands.get(command).execute(msg, args);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-built_in\">console</span>.error(error);\n    msg.reply(<span class=\"hljs-string\">&#x27;there was an error trying to execute that command!&#x27;</span>);\n  }\n});</code></pre></div>\n\n<p>It checks every message and separates by space into individual words, it then checks the first word to see if it is a command. If not it just does nothing. If so it tries to execute the command, and logs any errors.</p>\n<p>Now we should add the commands to make it actually do stuff. Create a folder called commands, and inside create <code>index.js</code> and <code>promote.js</code>. <code>promote.js</code> is my command so that can be whatever you want. Inside <code>promote.js</code> put the following code:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;promote&#x27;</span>,\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;Promote Joshs Blog!&#x27;</span>,\n    execute(msg, args) {\n      <span class=\"hljs-keyword\">const</span> embed = {\n        <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;Joshs Blog&quot;</span>,\n        <span class=\"hljs-string\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;My personal blog about Software Development, Sports, Music, and any more of my hobbies!&quot;</span>,\n        <span class=\"hljs-string\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;https://joshglasson.com&quot;</span>,\n        <span class=\"hljs-string\">&quot;color&quot;</span>: <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*<span class=\"hljs-number\">16777215</span>),\n        <span class=\"hljs-string\">&quot;timestamp&quot;</span>: <span class=\"hljs-built_in\">Date</span>.now()\n      };\n      msg.channel.send(<span class=\"hljs-string\">&quot;Check out my blog here: &quot;</span>, { embed });\n    },\n};</code></pre></div>\n\n<p>Again I have used the <a href=\"https://leovoel.github.io/embed-visualizer/\" target=\"_blank\">embed visualiser</a> here to get the embed code:</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-js-embed.png\" alt=\"JS Code to Embed a Link\"/>\n    <figcaption>JavaScript Code to Embed a Link</figcaption>\n  </figure>\n</div>\n\n<p>I have once again changed the colour and timestamp to be dynamic.</p>\n<p>Finally in <code>commands/index.js</code> we need to add the below:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">Promote</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./promote&#x27;</span>),\n};</code></pre></div>\n\n<p>We import any commands into this file, then import this file into the main <code>index.js</code>. This keeps it neater, as otherwise we would need to import each individual command into the main <code>index.js</code> file. We can now run the bot with <code>node index.js</code>.</p>\n<p>Here is the working JS bot:</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-js-message.png\" alt=\"JS Bot Working in Discord\"/>\n    <figcaption>JS Bot Working in Discord</figcaption>\n  </figure>\n</div>\n\n<p>As you can see it works pretty much the same way. However the key difference is it doesn&#39;t take a prefix, which may lead to confusion as it could trigger when it shouldn&#39;t. I updated my code to ensure it only picks up words with the <code>?</code> prefix as it does in the Ruby version. The below is what I added to the <code>on message</code> function in the main <code>index.js</code>, before the check for the command existing:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">if</span> (command.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>) != <span class=\"hljs-string\">&#x27;?&#x27;</span>) {\n  <span class=\"hljs-keyword\">return</span>;\n} <span class=\"hljs-keyword\">else</span> {\n  command = command.slice(<span class=\"hljs-number\">1</span>)\n}</code></pre></div>\n\n<p>Here it is in action</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-js-messages-with-prefix.gif\" alt=\"JS Bot\"/>\n  </figure>\n</div>\n\n<p>Now everything was working I added more info to my embed:</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-js-embed-with-images.png\" alt=\"JS Embed with Logo\"/>\n    <figcaption>JS Embed with Logo</figcaption>\n  </figure>\n</div>\n\n<br>\n\n<p>You can find the <a href=\"https://github.com/JoshGlasson/Discord-Bot\" target=\"_blank\">code on my GitHub</a></p>\n<p>And that is it for now. I find little things like this very interesting, I may revisit this and add more to it in the future, so look out for a part 2 one day!</p>\n<br>\n\n<h1><em><strong>UPDATE: Thu Sep 03 2020</strong></em></h1>\n<h2><em><strong>Adding Python</strong></em></h2>\n\n<br>\n\n<h1 id=\"python\">Python</h1>\n<h2 id=\"register-the-bot\">Register the Bot</h2>\n<p>Again we need to have a bot setup and an auth token ready to use. Follow the setup process in the Ruby guide for this if you haven&#39;t done it already, and then follow the guide in the JavaScript section to add it to your server.</p>\n<h2 id=\"project-setup-2\">Project Setup</h2>\n<p>Despite having PyCharm installed, I decided to stick with VSCode for the Python code. It actually works pretty well, well enough for the simple project I am going to be doing anyway! If you too want to use VSCode, I would follow <a href=\"https://code.visualstudio.com/docs/python/python-tutorial\" target=\"_blank\">this guide</a> to get it setup for Python.</p>\n<p>Now the IDE is setup we can start on the project. I was following <a href=\"https://www.devdungeon.com/content/make-discord-bot-python\" target=\"_blank\">this guide</a> to start with, but ran into all sorts of problems with python, so will try to explain exactly what I did.</p>\n<p>Firstly we need the <code>discord.py</code> library. There are some issues with this library working on the newest version of python, so use the below commands to get it working:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>python3 -m pip install -U <span class=\"hljs-string\">&quot;https://github.com/Rapptz/discord.py/archive/async.zip#egg=discord.py[voice]&quot;</span>\npython3 -m pip install --upgrade aiohttp\npython3 -m pip install --upgrade websockets</code></pre></div>\n\n<p>I am not sure the second and third commands are necessary, but it worked for me! Now we can get started, so in your project folder, create a file called <code>bot.py</code> and add the following code:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">import</span> discord\n\nTOKEN = <span class=\"hljs-string\">&#x27;PUT YOUR TOKEN HERE&#x27;</span>\n\nclient = discord.Client()\n\n<span class=\"hljs-meta\">@client.event</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_message</span>(<span class=\"hljs-params\">message</span>):</span>\n    <span class=\"hljs-comment\"># we do not want the bot to reply to itself</span>\n    <span class=\"hljs-keyword\">if</span> message.author == client.user:\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">if</span> message.content.startswith(<span class=\"hljs-string\">&#x27;!hello&#x27;</span>):\n        msg = <span class=\"hljs-string\">&#x27;Hello {0.author.mention}&#x27;</span>.format(message)\n        <span class=\"hljs-keyword\">await</span> client.send_message(message.channel, msg)\n\n<span class=\"hljs-meta\">@client.event</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_ready</span>():</span>\n    print(<span class=\"hljs-string\">&#x27;Logged in as&#x27;</span>)\n    print(client.user.name)\n    print(client.user.id)\n    print(<span class=\"hljs-string\">&#x27;------&#x27;</span>)\n\nclient.run(TOKEN)</code></pre></div>\n\n<p>After adding your token, try to run this python file in the terminal using <code>python3 /path/to/file/bot.py</code> (or the play button in the top right in VSCode).</p>\n<p>At this point you may run into an SSLError, something like this will be in the stack trace.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>Cannot connect to host discordapp.com:443 ssl:True \n[SSLCertVerificationError: (1, <span class=\"hljs-string\">&#x27;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1056)&#x27;</span>)]</code></pre></div>\n\n<p>If this does happen to you, navigate to your root directory, then go to <code>Applications/Python 3.7</code> and run the <code>Install Certificates.command</code> file. Now if you re-run the python script, it should work!</p>\n<p>You should be able to see your bot in your channel, and sending <code>!hello</code> should prompt it to reply and tag you in the response.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-py-hello.png\" alt=\"Python Bot Hello\"/>\n    <figcaption>Python Bot Hello</figcaption>\n  </figure>\n</div>\n\n<p>The bot is up and running now, so we can make some more tweaks. Instead of hardcoding my token into the <code>bot.py</code> file, I want to use <code>dotenv</code> as I have for my JavaScript bot. I installed the plugin with <code>python3 -m pip install python-dotenv</code>, and created a <code>.env</code> file with my token inside, in a key value pair format. For example <code>TOKEN=&quot;My token&quot;</code>.</p>\n<p>To get this into my <code>bot.py</code> file, I had to add a few things at the top:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">import</span> discord\n<span class=\"hljs-keyword\">from</span> dotenv <span class=\"hljs-keyword\">import</span> load_dotenv\n<span class=\"hljs-keyword\">import</span> os\n\nload_dotenv()\nTOKEN = os.environ.get(<span class=\"hljs-string\">&#x27;TOKEN&#x27;</span>)</code></pre></div>\n\n<p>Next I wanted to update my code to look for the <code>?</code> prefix, as it has in the other two projects. To do this I added another <code>if</code> block after the check that the bot is not replying to itself:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">if</span> message.content.startswith(<span class=\"hljs-string\">&#x27;?&#x27;</span>):\n    command = message.content[<span class=\"hljs-number\">1</span>:]\n    print(<span class=\"hljs-string\">&quot;Command received: &quot;</span> + command)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">&quot;Commands should start with ?&quot;</span>)\n    <span class=\"hljs-keyword\">return</span></code></pre></div>\n\n<p>If a message starts with <code>?</code>, then I trim the message to not include the <code>?</code> and save that into my <code>command</code> variable. If it does not start with <code>?</code> I print a log then <code>return</code>, so none of the rest of the code after this point is executed.</p>\n<p>Now I could add the <code>promote</code> command I have been working with on the other projects.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">if</span> command.startswith(<span class=\"hljs-string\">&#x27;promote&#x27;</span>):\n  colour=random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0xFFFFFF</span>)\n  embed = discord.Embed(title=<span class=\"hljs-string\">&quot;Joshs Blog&quot;</span>, colour=discord.Colour(colour), url=<span class=\"hljs-string\">&quot;https://joshglasson.com&quot;</span>, description=<span class=\"hljs-string\">&quot;My personal blog about Software Development, Sports, Music, and any more of my hobbies!&quot;</span>, timestamp=datetime.utcnow())\n  embed.set_image(url=<span class=\"hljs-string\">&quot;https://joshglasson.com/logo.png&quot;</span>)\n  embed.set_thumbnail(url=<span class=\"hljs-string\">&quot;https://joshglasson.com/logo.png&quot;</span>)\n  embed.set_author(name=<span class=\"hljs-string\">&quot;Josh Glasson&quot;</span>, url=<span class=\"hljs-string\">&quot;https://joshglasson.com&quot;</span>, icon_url=<span class=\"hljs-string\">&quot;https://joshglasson.com/logo.png&quot;</span>)\n  <span class=\"hljs-keyword\">await</span> client.send_message(message.channel, embed=embed)\n  print(<span class=\"hljs-string\">&quot;Command executed: &quot;</span> + command)</code></pre></div>\n\n<p>Once again I am picking a random colour and setting the time to now. To do this I used <code>random</code> and <code>datetime</code>, both of which have to be imported. I used the embed visualiser to get the right code for embedding, although had to tweek some bits to make it work with my bot.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-python-visualizer.png\" alt=\"Python Embed Visualiser\"/>\n    <figcaption>Python Embed Visualiser</figcaption>\n  </figure>\n</div>\n\n<p>Here is the full <code>bot.py</code> code:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">import</span> discord\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> dotenv <span class=\"hljs-keyword\">import</span> load_dotenv\n<span class=\"hljs-keyword\">import</span> os\n\nload_dotenv()\nTOKEN = os.environ.get(<span class=\"hljs-string\">&#x27;TOKEN&#x27;</span>)\n\nclient = discord.Client()\n\n<span class=\"hljs-meta\">@client.event</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_message</span>(<span class=\"hljs-params\">message</span>):</span>\n    <span class=\"hljs-comment\"># we do not want the bot to reply to itself</span>\n    <span class=\"hljs-keyword\">if</span> message.author == client.user:\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">if</span> message.content.startswith(<span class=\"hljs-string\">&#x27;?&#x27;</span>):\n        command = message.content[<span class=\"hljs-number\">1</span>:]\n        print(<span class=\"hljs-string\">&quot;Command received: &quot;</span> + command)\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-string\">&quot;Commands should start with ?&quot;</span>)\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">if</span> command.startswith(<span class=\"hljs-string\">&#x27;hello&#x27;</span>):\n        msg = <span class=\"hljs-string\">&#x27;Hello {0.author.mention}&#x27;</span>.format(message)\n        <span class=\"hljs-keyword\">await</span> client.send_message(message.channel, msg)\n        print(<span class=\"hljs-string\">&quot;Command executed: &quot;</span> + command)\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">if</span> command.startswith(<span class=\"hljs-string\">&#x27;promote&#x27;</span>):\n        colour=random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0xFFFFFF</span>)\n        embed = discord.Embed(title=<span class=\"hljs-string\">&quot;Joshs Blog&quot;</span>, colour=discord.Colour(colour), url=<span class=\"hljs-string\">&quot;https://joshglasson.com&quot;</span>, description=<span class=\"hljs-string\">&quot;My personal blog about Software Development, Sports, Music, and any more of my hobbies!&quot;</span>, timestamp=datetime.utcnow())\n        embed.set_image(url=<span class=\"hljs-string\">&quot;https://joshglasson.com/logo.png&quot;</span>)\n        embed.set_thumbnail(url=<span class=\"hljs-string\">&quot;https://joshglasson.com/logo.png&quot;</span>)\n        embed.set_author(name=<span class=\"hljs-string\">&quot;Josh Glasson&quot;</span>, url=<span class=\"hljs-string\">&quot;https://joshglasson.com&quot;</span>, icon_url=<span class=\"hljs-string\">&quot;https://joshglasson.com/logo.png&quot;</span>)\n        <span class=\"hljs-keyword\">await</span> client.send_message(message.channel, embed=embed)\n        print(<span class=\"hljs-string\">&quot;Command executed: &quot;</span> + command)\n        <span class=\"hljs-keyword\">return</span>\n\n    print(<span class=\"hljs-string\">&quot;Command &quot;</span> + command + <span class=\"hljs-string\">&quot; does not match any known commands&quot;</span>)\n\n<span class=\"hljs-meta\">@client.event</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_ready</span>():</span>\n    print(<span class=\"hljs-string\">&#x27;Logged in as&#x27;</span>)\n    print(client.user.name)\n    print(client.user.id)\n    print(<span class=\"hljs-string\">&#x27;------&#x27;</span>)\n\nclient.run(TOKEN)</code></pre></div>\n\n<p>And here it is in action:</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/09/discord-bot-python.png\" alt=\"Python Bot\"/>\n    <figcaption>Python Bot</figcaption>\n  </figure>\n</div>\n\n<p>You may have spotted the timestamp on the embed and the actual time are an hour apart. That is because I was using <code>datetime.now()</code> which was returning the time in BST, however Discord was expecting UTC and tried to convert it to BST again for me, hence it becomes an hour ahead of what it should be. I have updated the code above to use <code>datetime.utcnow()</code> which fixes this problem!</p>\n<p>As with before the <a href=\"https://github.com/JoshGlasson/Discord-Bot\" target=\"_blank\">code is on my GitHub</a> if you want to check it out.</p>\n","slug":"discord_bot","title":"Creating a Simple Discord Bot.","headline":"Its not self promotion if its done by a robot!","image":"./images/icons/discord logo.png","sortdate":"2020-09-03","originaldate":"2020-09-02","tags":["Software Development"]}