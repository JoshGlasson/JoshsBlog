{"html":"<p>Recently while having lunch with the more senior developers, the term Java Reflection was brought up quite a bit in a discussion regarding the pros and cons of Java versus other languages. It was something I had not really heard of before, so I made a note to look into what that actually meant.</p>\n<p>Reflection as it turns out is something that a few languages support, and while as I mainly work with Java I will focus on Java Reflection, hopefully the idea behind it is applicable to other languages.</p>\n<blockquote>\nReflection is a feature in the Java programming language. It allows an executing Java program to examine or \"introspect\" upon itself, and manipulate internal properties of the program. For example, it's possible for a Java class to obtain the names of all its members and display them.\n<br>\n<small><i>Source: <a href=\"https://www.oracle.com/technical-resources/articles/java/javareflection.html\" target=\"_blank\">Oracle</a></i></small>\n</blockquote>\n\n<p>So for example, say you have an Object with an unknown type, and you want to call a method <code>doStuff()</code> if it exists. Java isn&#39;t really designed to handle this, however with Java reflection, the code can look inside the Object and find out if it has the method, then call it if it exists.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>Method method = object.getClass().getMethod(<span class=\"hljs-string\">&quot;doStuff&quot;</span>, <span class=\"hljs-keyword\">null</span>);\nmethod.invoke(object, <span class=\"hljs-keyword\">null</span>);</code></pre></div>\n\n<p>The practical use of this is when you have an object and you don&#39;t know it&#39;s type, but you want to know more about it. </p>\n<p>A simple example showing this...</p>\n<p>Let&#39;s create a simple <em><strong>Car</strong></em> class with no methods.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Car</span> </span>{\n    <span class=\"hljs-keyword\">private</span> String brand;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> doors;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> seats;\n}</code></pre></div>\n\n\n<p>Now using Java reflection we can discover all of the fields of the object:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>Object car = <span class=\"hljs-keyword\">new</span> Car();\nField[] fields = car.getClass().getDeclaredFields();\n\nList&lt;String&gt; fieldNames = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n<span class=\"hljs-keyword\">for</span> (Field field : fields)\n    fieldNames.add(field.getName());\n<span class=\"hljs-keyword\">return</span> fieldNames;\n\nfieldNames == List.of(<span class=\"hljs-string\">&quot;brand&quot;</span>, <span class=\"hljs-string\">&quot;doors&quot;</span>, <span class=\"hljs-string\">&quot;seats&quot;</span>)</code></pre></div>\n\n<br>\n\n<h2 style=\"font-size:2em;\">Uses</h2>\n\n<p><em><strong>Extensibility Features</strong></em></p>\n<p>An application can make use of external, user-defined classes by extending existing classes.</p>\n<p><em><strong>Tests and Debugging</strong></em></p>\n<p>Test engines may use the <code>@Test</code> annotation to tag tests, then use reflection to find them in the code where running the tests.\nDebuggers may need to be able to examine private members of a class.</p>\n<p><em><strong>Development Environments</strong></em></p>\n<p>IDE&#39;s can make use of type information available in reflection to aid in writing code.</p>\n<br>\n\n<h2 style=\"font-size:2em;\">Drawbacks</h2>\n\n<p>Generally, despite its uses, if you can do something without reflection, you should.</p>\n<p><em><strong>Performance</strong></em></p>\n<p>Reflection is powerful but it stops the JVM optimising the code as much as it could without reflection. This means it performs a lot slower than non-reflective code. </p>\n<p><em><strong>Exposure of Internals</strong></em></p>\n<p>Through reflection, you can perform some operations that you shouldn&#39;t be able to, such as accessing <code>private</code> variables. Reflective code also breaks abstractions.</p>\n<p>See more here: \n<a href=\"https://docs.oracle.com/javase/tutorial/reflect/index.html\" target=\"_blank\">https://docs.oracle.com/javase/tutorial/reflect/index.html</a></p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/09/java-reflection.png\" alt=\"Java Reflection\"/>\n    <figcaption>Java Reflection</figcaption>\n    <figcaption>Source: My incredible artistic talent</figcaption>\n  </figure>\n</div>\n","slug":"2021-09-17-java_reflection","title":"Java Reflection.","headline":"What is reflection in Java?","image":"./images/icons/java.png","sortdate":"2021-09-17","originaldate":"2021-09-17","tags":["Software Development","Java"]}