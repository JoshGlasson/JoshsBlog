{"html":"<p>I&#39;ve talked a little about HTTP and how it works <a href=\"https://joshlearningto.code.blog/2020/01/03/http-pipelining-and-multiplexing/\" target=\"_blank\">here</a>, but I don&#39;t think I ever really covered the basics of requests over HTTP.</p>\n<br>\n\n<h2 style=\"font-size:2em;\">IP/TCP & HTTP</h2>\n\n<p>Requests over the internet generally will use HTTP, it is the standard for web communication. Let&#39;s start with how the HTTP requests and responses are sent between a client and a server. </p>\n<p>A connection between client and server is layered. IP finds the server, TCP opens a bridge between the client and server, then information is exchanged via HTTP.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/ip_tcp_http.png\" alt=\"IP/TCP & HTTP\"/>\n    <figcaption>IP/TCP & HTTP</figcaption>\n  </figure>\n</div>\n\n<p><strong style=\"font-size:1.3em;\">IP</strong> is the first layer. IP (<em><strong>Internet Protocol</strong></em>) specifies how datagrams (packets of data) are sent between hosts (client and server in this case). Each packet contains the IP Address of the source host and destination host. IP is responsible for routing the packet from the source to the destination, as the packet travels through the network, any node it reaches checks the destination IP address and sends it on its way. IP only ensures that a single packet reaches it&#39;s destination.</p>\n<p><strong style=\"font-size:1.3em;\">TCP</strong> is the next layer on top of IP. IP only uses best effort to get a packet to its destination. That means that packets may reach the destination in a different order than the one in which they were sent, reach the destination multiple times, or never reach the destination at all. TCP (<em><strong>Transmission Control Protocol</strong></em>) sits on top of IP, and provides a reliable, ordered, error-checked delivery of the packets. TCP connections allow data to flow in both directions.</p>\n<p><strong style=\"font-size:1.3em;\">HTTP</strong> is the final layer. It uses TCP to connect the client and server, and then requests and responses can be sent back and forward. </p>\n<br>\n\n<h2 style=\"font-size:2em;\">HTTP Requests</h2>\n\n<p>To explain HTTP a little more in depth, lets start with a basic example, visiting a website in your web browser.</p>\n<p>You open up your browser of choice, the client, and you put <strong><a href=\"https://joshglasson.co.uk\">https://joshglasson.co.uk</a></strong> into the URL bar at the top. \n<em><strong>Once you press enter</strong></em>, the first thing that happens is your browser extracts the <code>https</code> to decide the protocol it should use to attempt to make a connection. \nMy previous blog post mentioned in detail how encryption over HTTPS works, and I don&#39;t want to go into that level of detail at the moment, so please check out <a href=\"blog/2021-02-02-system_design_interview_pt3\" target=\"_blank\">this blog</a> if you want to read more on that.</p>\n<p>Running <code>curl -v &#39;https://joshglasson.co.uk</code> will show me the below.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>&gt; GET / HTTP/2 \n&gt; Host: joshglasson.co.uk</code></pre></div>\n\n<p>As a side note to this, if I tried instead <code>curl -v &#39;http://joshglasson.co.uk</code>, using http instead of https, I would see the below:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>&gt; GET / HTTP/1.1\n&gt; Host: joshglasson.co.uk\n\n&lt; HTTP/1.1 301 Moved Permanently\n\nRedirecting to https://joshglasson.co.uk/</code></pre></div>\n\n<p>Because my website doesn&#39;t support http (as it is old, outdated, and insecure), if you try to connect to it via http, you will receive an error and be redirected to the https version.</p>\n<p>So now that the browser knows how it should be communicating, it can figure out where it needs to send request. In the url, the user has put <code>joshglasson.co.uk</code>, but computers don&#39;t work using the human readable url that we enter. Instead, they use IP addresses. The browser will ask a DNS server (there are a few options, such as Cloud Flare and Google) what the IP address is for the domain name <code>joshglasson.co.uk</code>, and if that domain is registered, it will respond with the correct IP address. Again this is covered in more detail <a href=\"https://joshlearningto.code.blog/2020/08/04/distributed-system-design/\" target=\"_blank\">here</a>, including more info on IP addresses.</p>\n<p>Now that the browser has the IP address, it is able to open the TCP connection to it. There is some handshaking that needs to be done, especially with https, more detail on that can be found <a href=\"blog/2021-02-02-system_design_interview_pt3\" target=\"_blank\">here</a>.\nOnce the TCP connection is open, the browser can start sending requests. Lets have a look at the request:</p>\n<br>\n\n<h2 style=\"font-size:2em;\">The request line</h2>\n\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>&gt; GET / HTTP/2 </code></pre></div>\n\n<p>This is showing that the request that is being sent is a GET request, and that we are using HTTP 2. I will cover the different request methods later on. This is the Request line, the main part of the request.</p>\n<h2 style=\"font-size:2em;\">The request header</h2>\n\n<p>Along with the request you can send request headers. Most are optional, except <code>Host</code> (and <code>Connection</code> prior to HTTP 2):</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>&gt; Host: joshglasson.co.uk</code></pre></div>\n\n<p>Headers allow for additional information to be sent, for example if you are accessing sensitive data you may need an authorisation token, which would be passed in the <code>Authorization</code> header.</p>\n<br>\n\n<h2 style=\"font-size:2em;\">The request body</h2>\n\n<p>We are looking at a GET request at the moment, which does not include a request body. I will cover the request body when I come to looking at the other HTTP methods.</p>\n<br>\n\n<h2 style=\"font-size:2em;\">The response</h2>\n\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>&lt; HTTP/2 200</code></pre></div>\n\n<p>As I was able to successfully connect to the server and my request was valid, I received the above response. <code>200</code> represents <strong>OK</strong>, meaning that the server sent the response, and nothing else. Different response codes will show you other states, such as <code>201</code> which means that a resource has been created on the server based on the request sent.</p>\n<p>This response should then contain all of the code for the website, which the browser will then parse into what you see.</p>\n<br>\n\n<h1 style=\"font-size:3em;\">HTTP Methods</h2>\n\n<h2 style=\"font-size:2em;\">GET</h2>\n\n<p>The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.</p>\n<h2 style=\"font-size:2em;\">HEAD</h2>\n\n<p>The HEAD method asks for a response identical to that of a GET request, but without the response body.</p>\n<h2 style=\"font-size:2em;\">POST</h2>\n\n<p>The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.</p>\n<h2 style=\"font-size:2em;\">PUT</h2>\n\n<p>The PUT method replaces all current representations of the target resource with the request payload.</p>\n<h2 style=\"font-size:2em;\">DELETE</h2>\n\n<p>The DELETE method deletes the specified resource.</p>\n<h2 style=\"font-size:2em;\">CONNECT</h2>\n\n<p>The CONNECT method establishes a tunnel to the server identified by the target resource.</p>\n<h2 style=\"font-size:2em;\">OPTIONS</h2>\n\n<p>The OPTIONS method is used to describe the communication options for the target resource.</p>\n<h2 style=\"font-size:2em;\">TRACE</h2>\n\n<p>The TRACE method performs a message loop-back test along the path to the target resource.</p>\n<h2 style=\"font-size:2em;\">PATCH</h2>\n\n<p>The PATCH method is used to apply partial modifications to a resource. </p>\n<br>\n\n<h1 style=\"font-size:3em;\">REST</h1>\n\n<p>I talked about REST in <a href=\"blog/2021-01-19-system_design_interview_pt2\" target=\"_blank\">another post</a>, but I wanted to add a little more around REST standards.</p>\n<p>When a client request is made via a RESTful API, it transfers a representation of the state of the resource to the requester or endpoint. Headers are also very important in RESTful APIs as they contain information that is useful to the server.</p>\n<p>For an API to be RESTful, it has to conform to these criteria:</p>\n<ol>\n<li><strong>Client–server</strong> – By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.</li>\n<li><strong>Stateless</strong> – Each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server. Session state is therefore kept entirely on the client.</li>\n<li><strong>Cacheable</strong> – Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.</li>\n<li><strong>Uniform interface</strong> – By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. In order to obtain a uniform interface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: identification of resources; manipulation of resources through representations; self-descriptive messages; and, hypermedia as the engine of application state.</li>\n<li><strong>Layered system</strong> – The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot “see” beyond the immediate layer with which they are interacting.</li>\n<li><strong>Code on demand (optional)</strong> – REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts. This simplifies clients by reducing the number of features required to be pre-implemented. </li>\n</ol>\n<p>Source: <a href=\"https://restfulapi.net/\" target=\"_blank\">https://restfulapi.net/</a>.</p>\n<br>\n\n<h2 style=\"font-size:2em;\">Naming Conventions</h2>\n\n<p>REST APIs use URIs to address resources. When naming the API, a RESTful URI should refer to a resource that is a thing (noun) instead of referring to an action (verb) because nouns have properties which verbs do not have – similar to resources have attributes. </p>\n<p>Lets pretend we have a Spotify like music service, Notify, that we are trying to design an API for. The first part of the URI is the DNS name:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>http://api.notify.com</code></pre></div>\n\n<p>The API needs to be able to manage users, and the playlists on their accounts. So we could have:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>http://api.notify.com/user-management\nhttp://api.notify.com/song-management</code></pre></div>\n\n<p>If we wanted to get a list users, or one specific user, the URI would look like the below:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>GET http://api.notify.com/user-management/users\nGET http://api.notify.com/user-management/users/{userId}</code></pre></div>\n\n<p><code>userId</code> in the above example referring to a users id that would be passed in with the request to the API.</p>\n<p>Similarly we could have endpoints for viewing all playlists, or a specific playlist for a user:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>GET http://api.notify.com/song-management/users/{userId}/playlists\nGET http://api.notify.com/song-management/users/{userId}/playlists/{playlistId}</code></pre></div>\n\n<p>We may also have an API for the user to control the player:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>GET http://api.notify.com/song-management/users/{userId}/playlists/{playlistId}/play</code></pre></div>\n\n<p>Some more conventions for naming are:</p>\n<ul>\n<li>Use / to indicate a hierarchical relationship</li>\n<li>No trailing /&#39;s</li>\n<li>Use hyphens between words to improve readability</li>\n<li>Use hyphens and not underscores</li>\n<li>Use lowercase letters</li>\n<li>Do not use file extensions</li>\n</ul>\n<p>CRUD expressions should never be used in names either. The CRUD function should be defined by the HTTP method as in the below example:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>// WRONG\nGET http://api.notify.com/song-management/users/{userId}/playlists/{playlistId}/add?song=songId1,songId2\n\n// RIGHT\nPUT http://api.notify.com/song-management/users/{userId}/playlists/{playlistId}\nRequest Body:\n{\n    songs: [\n        songId1,\n        songId2\n    ]\n}</code></pre></div>\n\n<p>This means you can use the same endpoint to do multiple operations depending on the HTTP method:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>// ADD\nPUT http://api.notify.com/song-management/users/{userId}/playlists/{playlistId}/{songId}\n// REMOVE\nDELETE http://api.notify.com/song-management/users/{userId}/playlists/{playlistId}/{songId}</code></pre></div>\n\n<p>You can also use query parameters to filter:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>http://api.notify.com/user-management/users?region=USA</code></pre></div>\n\n<br>\n\n<h1 style=\"font-size:3em;\">API Call Flow</h1>\n\n<p>Here is an example of how an API call using HTTP may look:</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_flow-1.gif\" alt=\"API Call Flow\"/>\n    <figcaption>API Call Flow</figcaption>\n  </figure>\n</div>\n\n<p>Let&#39;s go through it step by step to see what is going on.</p>\n<p>Firstly, we have our client, where the request is being made. This could be your web browser, or an app on your phone.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_1.png\" alt=\"The Client\"/>\n    <figcaption>The Client</figcaption>\n  </figure>\n</div>\n\n<p>The client then makes a request to an api. The request in this case is a simple GET call to the api <code>https://api.com/endpoint</code>. The request is made using HTTP.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_2.png\" alt=\"The Client Makes a Request\"/>\n    <figcaption>The Client Makes a Request</figcaption>\n  </figure>\n</div>\n\n<p>The client needs to turn the Domain Name (api.com) into an IP address, so it send the Domain Name to a DNS Resolver.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_3.png\" alt=\"Resolve Domain Name\"/>\n    <figcaption>Resolve Domain Name</figcaption>\n  </figure>\n</div>\n\n<p>The DNS Resolver returns an IP Address to the client, so it knows where to send the request.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_4.png\" alt=\"IP Address Returned\"/>\n    <figcaption>IP Address Returned</figcaption>\n  </figure>\n</div>\n\n<p>The request is sent using IP/TCP to make the network connection. The IP Address leads to an API Gateway, which is an API Management tool that sits between the client and the backend. The API Gateway allows you to have a single entry point for all incoming requests, and monitor and rate limit incoming requests. You can also do authentication and validation here if you want.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_5.png\" alt=\"Request Sent to IP Address\"/>\n    <figcaption>Request Sent to IP Address</figcaption>\n  </figure>\n</div>\n\n<p>After passing through the API Gateway, the request then reaches a load balancer. The load balancer sits in front of the cloud application. Assuming your application has multiple servers/instances, the load balancer will decide which one to send the request to. This could be based on the current load of each server, a round robin approach, or a number of other algorithms.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_6.png\" alt=\"Request Goes to Load Balancer\"/>\n    <figcaption>Request Goes to Load Balancer</figcaption>\n  </figure>\n</div>\n\n<p>The load balancer sends the request onto one of the servers. The server receives the message and it is sent on to the backend application that is running on the server.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_7.png\" alt=\"Request Goes to the Server\"/>\n    <figcaption>Request Goes to the Server</figcaption>\n  </figure>\n</div>\n\n<p>The application may have some authentication it wants to do based on who can access the endpoint. If the authentication is successful, then the application can process the request.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_8.png\" alt=\"Application Does Authentication\"/>\n    <figcaption>Application Does Authentication</figcaption>\n  </figure>\n</div>\n\n<p>The response is then sent back over IP/TCP, first going through the API Gateway. Again this allows you to do logging, and perhaps some validation if you want.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_9.png\" alt=\"Application Sends Response\"/>\n    <figcaption>Application Sends Response</figcaption>\n  </figure>\n</div>\n\n<p>The response then reaches the client, who processes it and shows it to the user.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/api_call_http_flow_10.png\" alt=\"Client Receives Response\"/>\n    <figcaption>Client Receives Response</figcaption>\n  </figure>\n</div>\n\n<br>\n\n<h1 style=\"font-size:3em;\">HTTP Status Codes</h1>\n\n<p>HTTP response status codes indicate if a request has been successful. There are 5 classes of response:</p>\n<ol>\n<li><strong style=\"font-size:1.3em;\">1xx</strong> - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#information_responses\" target=\"_blank\">Informational Responses</a> (100 - 199).</li>\n<li><strong style=\"font-size:1.3em;\">2xx</strong> - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses\" target=\"_blank\">Successful Responses</a> (200 - 299).</li>\n<li><strong style=\"font-size:1.3em;\">3xx</strong> - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages\" target=\"_blank\">Redirects</a> (300 - 399).</li>\n<li><strong style=\"font-size:1.3em;\">4xx</strong> - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses\" target=\"_blank\">Client Errors</a> (400 - 499).</li>\n<li><strong style=\"font-size:1.3em;\">5xx</strong> - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses\" target=\"_blank\">Server Errors</a> (500 - 599).</li>\n</ol>\n<p>See <a href=\"https://www.restapitutorial.com/httpstatuscodes.html\" target=\"_blank\">this website</a> (or <a href=\"https://http.cat/\" target=\"_blank\">my preference</a>) for a full list of HTTP Status Codes.</p>\n<p>The main ones however are:</p>\n<h2 style=\"font-size:2em;\">2xx - Success</h2>\n\n<h2 style=\"font-size:1.5em;\">200 - OK</h2>\n\n<p>The request has succeeded. The information returned with the response is dependent on the method used in the request.</p>\n<h2 style=\"font-size:1.5em;\">201 - Created</h2>\n\n<p>The request has been fulfilled and resulted in a new resource being created. There may or may not be information returned.</p>\n<h2 style=\"font-size:1.5em;\">204 - No Content</h2>\n\n<p>The server successfully processed the request, but is not returning any content.</p>\n<h2 style=\"font-size:2em;\">4xx - Client Error</h2>\n\n<h2 style=\"font-size:1.5em;\">400 - Bad Request</h2>\n\n<p>The request cannot be fulfilled due to bad syntax. General error when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples.</p>\n<h2 style=\"font-size:1.5em;\">401 - Unauthorized</h2>\n\n<p>The request requires user authentication via a header. 401 is used when the request is missing or has an invalid authentication token.</p>\n<h2 style=\"font-size:1.5em;\">403 - Forbidden</h2>\n\n<p>The server understood the request, but is refusing to fulfill it. 403 is used when the user has passed something valid n the header, but they are not authorised to perform the operation.</p>\n<h2 style=\"font-size:1.5em;\">404 - Not Found</h2>\n\n<p>The server has not found anything matching the request.</p>\n<h2 style=\"font-size:1.5em;\">409 - Conflict</h2>\n\n<p>The request could not be completed due to a conflict with the current state of the resource. The response should contain information on the details of the conflict and how they could resolve it.</p>\n<h2 style=\"font-size:1.5em;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418\" target=\"_blank\">418 - I'm a teapot</a></h2>\n\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2021/05/google-teapot.gif\" alt=\"Google 418 Teapot\"/>\n    <figcaption>Google 418 Teapot</figcaption>\n    <figcaption>Source: <a href=\"https://www.google.com/teapot\" target=\"_blank\">https://www.google.com/teapot</a></figcaption>\n  </figure>\n</div>\n\n<h2 style=\"font-size:2em;\">5xx - Server Error</h2>\n\n<h2 style=\"font-size:1.5em;\">500 - Internal Server Error</h2>\n\n<p>The server encountered an unexpected condition which prevented it from fulfilling the request. The general catch-all error when the server-side throws an exception.</p>\n<h2 style=\"font-size:1.5em;\">503 - Service Unavailable</h2>\n\n<p>The server is currently unable to handle the request. May indicate a problem with a downstream system.</p>\n","slug":"2021-05-08-http","title":"HTTP.","headline":"Basics of Network Connections","image":"./images/icons/http.png","sortdate":"2021-05-12","originaldate":"2021-05-12","tags":["Software Development"]}