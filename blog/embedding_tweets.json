{"html":"<p>I have embedded a few tweets in my recent blog posts, you can see examples <a href=\"https://joshglasson.com/blog/f1_2020_70th_anniversary_gp\" target=\"_blank\">here in my last F1 recap</a>.</p>\n<p>Originally I was using Twitter&#39;s built in embed functionality. If you click the embed option on a tweet, you get taken to another page which provides some code for you to use. Here is an example of this code:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">blockquote</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;twitter-tweet&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">&quot;ltr&quot;</span>&gt;</span>Max<span class=\"hljs-symbol\">&amp;#39;</span>s grandma is probably pretty fast though, right?!? ðŸ‘µ ðŸš€<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://twitter.com/hashtag/F170?src=hash<span class=\"hljs-symbol\">&amp;amp;</span>ref_src=twsrc%5Etfw&quot;</span>&gt;</span>#F170<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> ðŸ‡¬ðŸ‡§ <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://twitter.com/hashtag/F1?src=hash<span class=\"hljs-symbol\">&amp;amp;</span>ref_src=twsrc%5Etfw&quot;</span>&gt;</span>#F1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://t.co/c0CpuE3iGE&quot;</span>&gt;</span>pic.twitter.com/c0CpuE3iGE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-symbol\">&amp;mdash;</span> Formula 1 (@F1) <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://twitter.com/F1/status/1292573366981816320?ref_src=twsrc%5Etfw&quot;</span>&gt;</span>August 9, 2020<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">blockquote</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://platform.twitter.com/widgets.js&quot;</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> </code></pre></div>\n\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/08/screenshot-2020-08-12-at-11.33.43.png\" alt=\"Embed option on Tweet\"/>\n    <figcaption>Embed option on Tweet</figcaption>\n  </figure>\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/08/screenshot-2020-08-12-at-11.34.10.png\" alt=\"Twitter Embed Website\"/>\n    <figcaption>Twitter Embed Website</figcaption></a>\n  </figure>\n</div>\n\n<p>I also added <code>tw-align-center</code> to make the tweet center itself in the div.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/08/embedded-tweet.png\" style=\"border-style: solid; border-color: white;\" alt=\"Embedded Tweet\"/>\n    <figcaption>Embedded Tweet</figcaption>\n  </figure>\n</div>\n\n\n<p>I thought this worked fine, I could see the tweet loading and it was visible on the page. I added <code>data-theme: dark</code> to change the background colour of the tweet to be in dark mode too.</p>\n<p>The way it seemed to work was that the script Twitter included in the embed code would resolve the <code>blockquote</code> into a bunch of divs containing the content.</p>\n<p>I was happy with this, so I pushed it live. However once it was live, I was looking at it on my phone, and I noticed that most of the time the tweet would not load:</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/08/embedded-tweet-not-loading.png\" style=\"border-style: solid; border-color: white;\" alt=\"Embedded Tweet Not Loading\"/>\n    <figcaption>Embedded Tweet Not Loading</figcaption>\n  </figure>\n</div>\n\n<p>I had a look into it and realised that in these cases, the <code>blockquote</code> never got resolved, so just stayed on the page as a <code>blockquote</code> element. Below you can see what it is meant to look like vs how it looked when it wasn&#39;t working.</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/08/resolved-code.png\" alt=\"Resolved Code to Display Tweet\"/>\n    <figcaption>Resolved Code to Display Tweet</figcaption>\n  </figure>\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/08/unresolved-blockquote.png\" alt=\"Unresolved Blockquote Remaining on Page\"/>\n    <figcaption>Unresolved Blockquote Remaining on Page</figcaption></a>\n  </figure>\n</div>\n\n<p>I had a feeling this was to do with all the complexity around JavaScript being asynchronous, and also that the way I am using Svelte and Sapper is that is uses Server Side Rendering (SSR), which can cause issues.</p>\n<p>To get around this, I decided it would be better to load the tweets after the page had loaded, to avoid these problems. I tried using a svelte twitter widgets plugin initially, but I was unable to get it to work. I did a bit more digging, and found <a href=\"https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-javascript-factory-function\" target=\"_blank\">some information from Twitter themselves</a>. Using this JavaScript factory function, it would allow you to dynamically insert tweets, which is basically what I wanted. Firsly I added this script to the <code>_layout.svelte</code> file which applied to every other file. This meant it should be available anywhere I needed it:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;twitter-wjs&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://platform.twitter.com/widgets.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n<p>To create the tweet using the factory, a function like the below would be needed:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>twttr.widgets.createTweet(\n  <span class=\"hljs-string\">&#x27;20&#x27;</span>, <span class=\"hljs-comment\">// id of the tweet</span>\n  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;container&#x27;</span>), <span class=\"hljs-comment\">// parent element where tweet will go</span>\n  {\n    <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-string\">&#x27;dark&#x27;</span> <span class=\"hljs-comment\">// tweet theme</span>\n  }\n);</code></pre></div>\n\n<p>As I now needed to only know the id of a tweet, I replaced my <code>blockquote</code> code in the markdown file, with a simple <code>p</code> tag containing the id of the tweet. I gave the tag a class of <strong><em>tweetToEmbed</em></strong> to make it easy to identify. I set the display to none so that the number does not show on the page.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;tweetToEmbed&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;display: none;&quot;</span>&gt;</span>1293525663702450176<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre></div>\n\n<p>Next I added a function in my <code>[slug].svelte</code> file, which is where the posts are rendered into actual pages, to use this factory function.</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createTweets</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> tweets = <span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">&#x27;tweetToEmbed&#x27;</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; tweets.length; i++) {\n    <span class=\"hljs-keyword\">var</span> tweet = tweets[i];\n    <span class=\"hljs-keyword\">var</span> parent = tweet.parentElement;\n    <span class=\"hljs-built_in\">window</span>.twttr.widgets.createTweet(\n      tweet.innerText,\n      parent,\n      {\n        <span class=\"hljs-attr\">align</span>: <span class=\"hljs-string\">&#x27;center&#x27;</span>,\n        <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-string\">&#x27;dark&#x27;</span>,\n        <span class=\"hljs-attr\">dnt</span>: <span class=\"hljs-string\">&#x27;true&#x27;</span>\n      }\n    );\n  };\n}</code></pre></div>\n\n<p>Basically I am retrieving every <strong><em>tweetToEmbed</em></strong> element, and for each one I am getting the parent element and adding the tweet into it using the factory. </p>\n<p>It worked exactly as I wanted it to, it was rendering the tweets every time, and with minimal delay. </p>\n<p>I really wanted to be able to change the theme of the tweet dynamically however, as I had done with the rest of the website. I had a think, and was able to achieve this doing the below.</p>\n<p>First I needed to identify when the theme had changed. I knew that when it changed, a <code>dark-mode</code> class was either appended or removed from the body tag. So I Googled how I could watch for these changes, and found out about <code>MutationObserver</code>. I added this code to my JavaScript:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-keyword\">var</span> body = <span class=\"hljs-built_in\">document</span>.body;\n<span class=\"hljs-keyword\">const</span> mutationObserver = <span class=\"hljs-keyword\">new</span> MutationObserver(callback)\nmutationObserver.observe(body, { <span class=\"hljs-attr\">attributes</span>: <span class=\"hljs-literal\">true</span> })\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callback</span>(<span class=\"hljs-params\">mutationsList, observer</span>) </span>{\n  mutationsList.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">mutation</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (mutation.attributeName === <span class=\"hljs-string\">&#x27;class&#x27;</span>) {\n      <span class=\"hljs-comment\">// do something after class has changed</span>\n    };\n  });\n};</code></pre></div>\n\n<p>If the class of the <code>body</code> changed, this would catch it. Unfortunately it didn&#39;t seem to capture what the change was, so I couldn&#39;t tell from here what theme it was changing to. So I added another function called <code>checkTheme</code>:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkTheme</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> dark_toggle = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">&#x27;dark_mode_toggle&#x27;</span>);\n  <span class=\"hljs-keyword\">if</span> (dark_toggle === <span class=\"hljs-string\">&#x27;false&#x27;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;light&#x27;</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;dark&#x27;</span>;\n  };\n};</code></pre></div>\n\n<p>This function made use of the localStorage item I was using to set the theme when the page first loads. Now I could tell what the theme was, I could pass this to my <code>createTweets</code> function to update the theme of the tweets. However, I would first need to delete any existing tweets, otherwise they would all just stack up as a new one would be created every time the theme was changed on the page. I added a function to deal with this too. Here is all the completed code for doing everything I just talked about:</p>\n<div id=\"codeSnippet\">\n\n<pre class='language-javascriptreact'><code>\n<span class=\"hljs-comment\">// listening for changes to the body class</span>\n<span class=\"hljs-keyword\">var</span> body = <span class=\"hljs-built_in\">document</span>.body;\n<span class=\"hljs-keyword\">const</span> mutationObserver = <span class=\"hljs-keyword\">new</span> MutationObserver(callback)\nmutationObserver.observe(body, { <span class=\"hljs-attr\">attributes</span>: <span class=\"hljs-literal\">true</span> })\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callback</span>(<span class=\"hljs-params\">mutationsList, observer</span>) </span>{\n  mutationsList.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">mutation</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (mutation.attributeName === <span class=\"hljs-string\">&#x27;class&#x27;</span>) {\n      createTweets(checkTheme()); <span class=\"hljs-comment\">// calls createTweets with the theme which is decided by checkTheme</span>\n    };\n  });\n};\n\n<span class=\"hljs-comment\">// called to figure out what the theme is currently</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkTheme</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> dark_toggle = <span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-string\">&#x27;dark_mode_toggle&#x27;</span>);\n  <span class=\"hljs-keyword\">if</span> (dark_toggle === <span class=\"hljs-string\">&#x27;false&#x27;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;light&#x27;</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;dark&#x27;</span>;\n  };\n};\n\n<span class=\"hljs-comment\">// calling the method to load the tweet when the page loads</span>\ncreateTweets(checkTheme());\n\n<span class=\"hljs-comment\">// creating the tweet with a theme that is passed in</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createTweets</span>(<span class=\"hljs-params\">theme</span>) </span>{\n  cleanupTweets(); <span class=\"hljs-comment\">// first deletes any existing tweets on the page</span>\n  <span class=\"hljs-keyword\">var</span> tweets = <span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">&#x27;tweetToEmbed&#x27;</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; tweets.length; i++) {\n    <span class=\"hljs-keyword\">var</span> tweet = tweets[i];\n    <span class=\"hljs-keyword\">var</span> parent = tweet.parentElement;\n    <span class=\"hljs-built_in\">window</span>.twttr.widgets.createTweet(\n      tweet.innerText,\n      parent,\n      {\n        <span class=\"hljs-attr\">align</span>: <span class=\"hljs-string\">&#x27;center&#x27;</span>,\n        <span class=\"hljs-attr\">theme</span>: theme, <span class=\"hljs-comment\">// uses whatever theme is passed in</span>\n        <span class=\"hljs-attr\">dnt</span>: <span class=\"hljs-string\">&#x27;true&#x27;</span>\n      }\n    );\n  };\n}\n\n<span class=\"hljs-comment\">// finds all existing tweets and removes them from the parent node</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cleanupTweets</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> tweets = <span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">&#x27;twitter-tweet twitter-tweet-rendered&#x27;</span>);\n  <span class=\"hljs-keyword\">while</span>(tweets.length &gt; <span class=\"hljs-number\">0</span>){\n    tweets[<span class=\"hljs-number\">0</span>].parentNode.removeChild(tweets[<span class=\"hljs-number\">0</span>]);\n  };\n};</code></pre></div>\n\n<p>So now the tweet is able to dynamically change with the theme of the website!</p>\n<div id=\"imageDiv\">\n  <figure>\n    <img src=\"https://joshlearningtocode.files.wordpress.com/2020/08/tweet-theme-changing.gif\" alt=\"A tweet switching themes\"/>\n  </figure>\n</div>\n\n<p>You can see there is a small delay where the JavaScript is getting the tweet, but it is pretty minimal.</p>\n<p>I spent a couple of days fumbling around with plugins, scripts, JavaScript and all sorts trying to get this to work, so I hope that if anyone else is in this very specific situation, they are able to find this and maybe get some inspiration to help them solve their issues!</p>\n<p>You can have a play around with it and hopefully see it working with the tweet below:</p>\n<div id=\"imageDiv\">\n    <p class=\"tweetToEmbed\" style=\"display: none;\">1293525663702450176</p>\n</div>\n\n<br >","slug":"embedding_tweets","title":"Embedding Tweets In Svelte Blog Posts.","headline":"Reliably embed tweets in blog posts when using Svelte and Sapper","image":"./images/icons_same_size/twitter_logo.png","sortdate":"2020-08-12","originaldate":"2020-08-12","tags":["Software Development","Svelte","HTML, CSS & JavaScript"]}